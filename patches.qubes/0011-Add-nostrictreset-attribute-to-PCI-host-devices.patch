From 6db2e866b4a30c886e685241e085d6d8767e2532 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 23 May 2015 04:25:01 +0200
Subject: [PATCH 11/11] Add 'nostrictreset' attribute to PCI host devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

This allows to assign PCI device to some VM, even when the device does not
support any reset method. This may be dangerous in some cases (especially when
the device is later assigned to some other VM). But in some cases it still
makes sense - for example when the device is assigned to the same VM whole the
time.

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
diff -ur -x .cproject -x .project -x '*.swp' a/docs/formatdomain.html.in b/docs/formatdomain.html.in
--- a/docs/formatdomain.html.in	2016-07-20 23:23:39.497000000 +0300
+++ b/docs/formatdomain.html.in	2016-07-20 23:00:19.664000000 +0300
@@ -3527,6 +3527,9 @@
             or hot-plugging the device and <code>virNodeDeviceReAttach</code>
             (or <code>virsh nodedev-reattach</code>) after hot-unplug or
             stopping the guest.
+            Additionally when <code>strictreset</code> is "no", device will
+            be assigned to the domain, even when reset fails. The default is
+            "yes".          
           </dd>
           <dt><code>scsi</code></dt>
           <dd>For SCSI devices, user is responsible to make sure the device
diff -ur -x .cproject -x .project -x '*.swp' a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
--- a/docs/schemas/domaincommon.rng	2016-07-20 23:23:39.497000000 +0300
+++ b/docs/schemas/domaincommon.rng	2016-07-20 23:08:35.288000000 +0300
@@ -2311,6 +2311,11 @@
               <ref name="virYesNo"/>
             </attribute>
           </optional>
+          <optional>
+            <attribute name="nostrictreset">
+              <ref name="virYesNo"/>
+            </attribute>
+          </optional>
           <interleave>
             <element name="source">
               <optional>
diff -ur -x .cproject -x .project -x '*.swp' a/src/conf/domain_conf.c b/src/conf/domain_conf.c
--- a/src/conf/domain_conf.c	2016-07-20 23:23:39.500000000 +0300
+++ b/src/conf/domain_conf.c	2016-07-20 23:14:36.241000000 +0300
@@ -5755,6 +5755,7 @@
 {
     xmlNodePtr sourcenode;
     char *managed = NULL;
+    char *nostrictreset = NULL;
     char *sgio = NULL;
     char *rawio = NULL;
     char *backendStr = NULL;
@@ -5773,6 +5774,11 @@
             def->managed = true;
     }
 
+    if ((nostrictreset = virXMLPropString(node, "nostrictreset")) != NULL) {
+        if (STREQ(nostrictreset, "yes"))
+            def->nostrictreset = true;
+    }
+
     sgio = virXMLPropString(node, "sgio");
     rawio = virXMLPropString(node, "rawio");
 
@@ -5879,6 +5885,7 @@
     ret = 0;
  error:
     VIR_FREE(managed);
+    VIR_FREE(nostrictreset);
     VIR_FREE(sgio);
     VIR_FREE(rawio);
     VIR_FREE(backendStr);
@@ -20237,6 +20244,8 @@
         virDomainHostdevDefPtr hostdef = virDomainNetGetActualHostdev(def);
         if  (hostdef && hostdef->managed)
             virBufferAddLit(buf, " managed='yes'");
+        if  (hostdef && hostdef->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
     }
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
@@ -20408,6 +20418,8 @@
     virBufferAsprintf(buf, "<interface type='%s'", typeStr);
     if (hostdef && hostdef->managed)
         virBufferAddLit(buf, " managed='yes'");
+    if (hostdef && hostdef->nostrictreset)
+        virBufferAddLit(buf, " nostrictreset='yes'");
     if (def->trustGuestRxFilters)
         virBufferAsprintf(buf, " trustGuestRxFilters='%s'",
                           virTristateBoolTypeToString(def->trustGuestRxFilters));
@@ -21874,6 +21886,8 @@
     if (def->mode == VIR_DOMAIN_HOSTDEV_MODE_SUBSYS) {
         virBufferAsprintf(buf, " managed='%s'",
                           def->managed ? "yes" : "no");
+        if (def->nostrictreset)
+            virBufferAddLit(buf, " nostrictreset='yes'");
 
         if (def->source.subsys.type == VIR_DOMAIN_HOSTDEV_SUBSYS_TYPE_SCSI &&
             scsisrc->sgio)
diff -ur -x .cproject -x .project -x '*.swp' a/src/conf/domain_conf.h b/src/conf/domain_conf.h
--- a/src/conf/domain_conf.h	2016-07-20 23:23:39.501000000 +0300
+++ b/src/conf/domain_conf.h	2016-07-20 23:15:18.524000000 +0300
@@ -421,6 +421,7 @@
     bool missing;
     bool readonly;
     bool shareable;
+    bool nostrictreset;
     union {
         virDomainHostdevSubsys subsys;
         virDomainHostdevCaps caps;
diff -ur -x .cproject -x .project -x '*.swp' a/src/util/virhostdev.c b/src/util/virhostdev.c
--- a/src/util/virhostdev.c	2016-05-24 12:26:53.000000000 +0300
+++ b/src/util/virhostdev.c	2016-07-20 23:17:29.390000000 +0300
@@ -260,6 +260,8 @@
             virPCIDeviceSetStubDriver(pci, VIR_PCI_STUB_DRIVER_XEN);
         else
             virPCIDeviceSetStubDriver(pci, VIR_PCI_STUB_DRIVER_KVM);
+
+        virPCIDeviceSetStrictReset(pci, !hostdev->nostrictreset);
     }
 
     return pcidevs;
diff -ur -x .cproject -x .project -x '*.swp' a/src/util/virpci.c b/src/util/virpci.c
--- a/src/util/virpci.c	2016-07-20 23:23:39.518000000 +0300
+++ b/src/util/virpci.c	2016-07-20 23:21:08.772000000 +0300
@@ -84,6 +84,7 @@
     bool          has_flr;
     bool          has_pm_reset;
     bool          managed;
+    bool          strictreset;
 
     virPCIStubDriver stubDriver;
 
@@ -995,6 +996,9 @@
                        dev->name,
                        err ? err->message :
                        _("no FLR, PM reset or bus reset available"));
+        if (!dev->strictreset)
+            /* do not fail */
+            ret = 0;
     }
 
  cleanup:
@@ -1598,6 +1602,7 @@
     dev->address.bus = bus;
     dev->address.slot = slot;
     dev->address.function = function;
+    dev->strictreset    = true;
 
     if (snprintf(dev->name, sizeof(dev->name), "%.4x:%.2x:%.2x.%.1x",
                  domain, bus, slot, function) >= sizeof(dev->name)) {
@@ -1719,6 +1724,17 @@
     return dev->managed;
 }
 
+void virPCIDeviceSetStrictReset(virPCIDevicePtr dev, bool strictreset)
+{
+    dev->strictreset = strictreset;
+}
+
+unsigned int
+virPCIDeviceGetStrictReset(virPCIDevicePtr dev)
+{
+    return dev->strictreset;
+}
+
 void
 virPCIDeviceSetStubDriver(virPCIDevicePtr dev, virPCIStubDriver driver)
 {
diff -ur -x .cproject -x .project -x '*.swp' a/src/util/virpci.h b/src/util/virpci.h
--- a/src/util/virpci.h	2016-05-24 12:26:53.000000000 +0300
+++ b/src/util/virpci.h	2016-07-20 23:21:54.934000000 +0300
@@ -111,6 +111,8 @@
 void virPCIDeviceSetManaged(virPCIDevice *dev,
                             bool managed);
 bool virPCIDeviceGetManaged(virPCIDevice *dev);
+void virPCIDeviceSetStrictReset(virPCIDevice *dev, bool strictreset);
+unsigned int virPCIDeviceGetStrictReset(virPCIDevicePtr dev);
 void virPCIDeviceSetStubDriver(virPCIDevicePtr dev,
                                virPCIStubDriver driver);
 virPCIStubDriver virPCIDeviceGetStubDriver(virPCIDevicePtr dev);
